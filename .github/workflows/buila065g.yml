name: Build Samsung A06 GKI Kernel (KSU + SUSFS)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: huyzilo77-bot/A066-5G   # Repo kernel c·ªßa b·∫°n
          ref: main                          # Nh√°nh main, ƒë·ªïi n·∫øu kh√°c

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: Install deps & toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget curl unzip bc build-essential ccache \
            flex bison libssl-dev libncurses5-dev python3 clang lld

      - name: üì¶ Install toolchains (Clang + GCC)
        run: |
          mkdir -p ~/toolchains
          cd ~/toolchains

          if [ ! -d "clang" ]; then
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang
          fi
          if [ ! -d "gcc64" ]; then
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 gcc64
          fi

          echo "CC=clang" >> $GITHUB_ENV
          echo "CROSS_COMPILE=$HOME/toolchains/gcc64/bin/aarch64-linux-android-" >> $GITHUB_ENV
          echo "PATH=$HOME/toolchains/clang/bin:$PATH" >> $GITHUB_ENV

      - name: Setup ccache
        run: |
          export USE_CCACHE=1
          ccache -M 10G
          ccache -z

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: üå± Detect Kernel Dir
        run: |
          if [ -d "kernel-5.15" ]; then
            echo "KERNEL_DIR=kernel-5.15" >> $GITHUB_ENV
          elif [ -d "kernel" ]; then
            echo "KERNEL_DIR=kernel" >> $GITHUB_ENV
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c kernel!"
            exit 1
          fi

      - name: üîß Fix permissions for build scripts
        run: |
          cd $KERNEL_DIR
          find . -type f -name "*.sh" -exec chmod +x {} \;
          find . -type f -name "build.config*" -exec chmod +x {} \;
          chmod -R +x . || true

      - name: üå± Clone KernelSU-Next & SUSFS & AnyKernel3
        run: |
          git clone --depth=1 https://github.com/KernelSU-Next/KernelSU-Next.git KernelSU-Next
          git clone --depth=1 https://github.com/sidex15/susfs4ksu-module.git susfs
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git AnyKernel3

      - name: üå± Apply KernelSU
        run: |
          cd $KERNEL_DIR
          bash ../KernelSU-Next/kernel/setup.sh || true

      - name: üå± Apply SUSFS
        run: |
          cd $KERNEL_DIR
          patch -p1 < ../susfs/susfs.patch || true

      - name: ‚ö° Force enable KSU & SUSFS via build.config
        run: |
          CONFIG_FILE="$KERNEL_DIR/build.config.mtk.aarch64"
          echo 'POST_DEFCONFIG_CMDS="
            echo CONFIG_KSU=y >> $OUT_DIR/.config;
            echo CONFIG_SUSFS=y >> $OUT_DIR/.config;
            make -C $KERNEL_DIR O=$OUT_DIR olddefconfig;
          "' >> $CONFIG_FILE
          cat $CONFIG_FILE

      - name: Generate build.config & Build kernel
        run: |
          cd kernel-5.15
          python3 scripts/gen_build_config.py \
            --kernel-defconfig a06x_00_defconfig \
            --kernel-defconfig-overlays "entry_level.config" \
            -m user \
            -o ../out/target/product/a06x/obj/KERNEL_OBJ/build.config

          export ARCH=arm64
          export PLATFORM_VERSION=13
          export CROSS_COMPILE="aarch64-linux-gnu-"
          export CROSS_COMPILE_COMPAT="arm-linux-gnueabi-"
          export OUT_DIR="../out/target/product/a06x/obj/KERNEL_OBJ"
          export DIST_DIR="../out/target/product/a06x/obj/KERNEL_OBJ"
          export BUILD_CONFIG="../out/target/product/a06x/obj/KERNEL_OBJ/build.config"

          cd ../kernel
          bash build/build.sh -j$(nproc)

      - name: Debug outputs
        run: |
          echo "üìÇ Ki·ªÉm tra th∆∞ m·ª•c boot:"
          ls -lh out/target/product/a06x/obj/KERNEL_OBJ/arch/arm64/boot || true

          echo "üìÇ Ki·ªÉm tra dist:"
          ls -lh out/target/product/a06x/obj/KERNEL_OBJ/dist || true

      - name: Package AnyKernel3 (KernelSU + SUSFS)
        run: |
          set -eux
          # ∆Øu ti√™n l·∫•y t·ª´ boot/
          BOOT_DIR=out/target/product/a06x/obj/KERNEL_OBJ/arch/arm64/boot
          DIST_DIR=out/target/product/a06x/obj/KERNEL_OBJ/dist

          IMG=""
          if [ -d "$BOOT_DIR" ]; then
            IMG=$(find $BOOT_DIR -maxdepth 1 -type f -name "Image*" | head -n 1 || true)
          fi
          if [ -z "$IMG" ] && [ -d "$DIST_DIR" ]; then
            IMG=$(find $DIST_DIR -maxdepth 1 -type f -name "Image*" | head -n 1 || true)
          fi

          if [ -z "$IMG" ]; then
            echo "‚ùå Kh√¥ng t√¨m th·∫•y kernel Image trong boot/ ho·∫∑c dist/"
            exit 1
          fi

          cp "$IMG" AnyKernel3/Image
          cp -r $BOOT_DIR/dtbo* AnyKernel3/ || true
          cp -r $DIST_DIR/dtbo* AnyKernel3/ || true
          cd AnyKernel3
          zip -r9 "../Kernel-A06-5.15-KSU-SUSFS.zip" . -x .git README.md *.zip
          
      - name: Upload Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Zip
          path: Kernel-A06-5.15-KSU-SUSFS.zip
